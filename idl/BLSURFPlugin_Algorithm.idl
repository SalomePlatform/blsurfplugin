//  Copyright (C) 2003  OPEN CASCADE, EADS/CCR, LIP6, CEA/DEN,
//  CEDRAT, EDF R&D, LEG, PRINCIPIA R&D, BUREAU VERITAS 
// 
//  This library is free software; you can redistribute it and/or 
//  modify it under the terms of the GNU Lesser General Public 
//  License as published by the Free Software Foundation; either 
//  version 2.1 of the License. 
// 
//  This library is distributed in the hope that it will be useful, 
//  but WITHOUT ANY WARRANTY; without even the implied warranty of 
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
//  Lesser General Public License for more details. 
// 
//  You should have received a copy of the GNU Lesser General Public 
//  License along with this library; if not, write to the Free Software 
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA 
// 
//  See http://www.opencascade.org/SALOME/ or email : webmaster.salome@opencascade.org 
//
//
//
//  File    : BLSURFPlugin_Algorithm.idl
//  Authors : Francis KLOSS (OCC) & Patrick LAUG (INRIA) & Lioka RAZAFINDRAZAKA (CEA)

#ifndef _SMESH_BLSURFALGORITHM_IDL_
#define _SMESH_BLSURFALGORITHM_IDL_

#include "SMESH_Hypothesis.idl"

/*!
 * BLSURFPlugin: interfaces to BLSURF related hypotheses and algorithms
 */
module BLSURFPlugin
{
  /*!
   * BLSURFPlugin_BLSURF: interface of BLSURF algorithm
   */
  interface BLSURFPlugin_BLSURF : SMESH::SMESH_2D_Algo
  {
  };

  /*!
   * BLSURFPlugin_Hypothesis: interface of "BLSURF parameters" hypothesis
   */
  interface BLSURFPlugin_Hypothesis : SMESH::SMESH_Hypothesis
  {
    /*!
     * Sets topology usage way defining how mesh conformity is assured
     * value=0 - mesh conformity is assured by conformity of a shape
     * value=1,2 - mesh conformity is assured by pre-processing a CAD model
     */
    void SetTopology(in long way);
    long GetTopology();

    /*!
     * Sets a way to define size of mesh elements to generate
     * 0 - size is defined automatically
     * 1 - size is set by SetPhySize() method
     */
    void SetPhysicalMesh(in long isCustom);
    long GetPhysicalMesh();

    /*!
     * Sets size of mesh elements to generate
     */
    void SetPhySize(in double size);
    double GetPhySize();

    /*!
     * Sets a way to define maximum angular deflection of mesh from CAD model
     * 0 - deflection is defined automatically
     * 1 - deflection is set by SetAngleMeshS() method
     */
    void SetGeometricMesh(in long isCustom);
    long GetGeometricMesh();

    /*!
     * Sets angular deflection (in degrees) of mesh from CAD model
     */
    void SetAngleMeshS(in double angle);
    double GetAngleMeshS();

    /*!
     * Sets maximal allowed ratio between the lengths of two adjacent edges
     */
    void SetGradation(in double ratio);
    double GetGradation();

    /*!
     * Sets to create quadrilateral elements or not
     */
    void SetQuadAllowed(in boolean allowed);
    boolean GetQuadAllowed();

    /*!
     * To respect geometrical edges or not
     */
    void SetDecimesh(in boolean toIgnoreEdges);
    boolean GetDecimesh();
  };

};

#endif
